import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
var _excluded = ["type", "attributes"];
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context12, _context13; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context12 = ownKeys(Object(t), !0)).call(_context12, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context13 = ownKeys(Object(t))).call(_context13, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof _Symbol && _getIteratorMethod(r) || r["@@iterator"]; if (!t) { if (_Array$isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { var _context11; if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = _sliceInstanceProperty(_context11 = {}.toString.call(r)).call(_context11, 8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? _Array$from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import "core-js/modules/es.error.cause.js";
import "core-js/modules/es.array.push.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.regexp.test.js";
import "core-js/modules/es.regexp.to-string.js";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
/**
 * @file Salesforce SOAP API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { registerModule } from '../jsforce';
import SOAP from '../soap';
import { ApiSchemas } from './soap/schema';

/**
 *
 */
function toSoapRecord(records) {
  var _context;
  return _mapInstanceProperty(_context = _Array$isArray(records) ? records : [records]).call(_context, function (record) {
    var _context2;
    var type = record.type,
      attributes = record.attributes,
      rec = _objectWithoutProperties(record, _excluded);
    var t = type || (attributes === null || attributes === void 0 ? void 0 : attributes.type);
    if (!t) {
      throw new Error('Given record is not including sObject type information');
    }
    var fieldsToNull = _filterInstanceProperty(_context2 = _Object$keys(rec)).call(_context2, function (field) {
      return record[field] === null;
    });
    var _iterator = _createForOfIteratorHelper(fieldsToNull),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var field = _step.value;
        delete rec[field];
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return fieldsToNull.length > 0 ? _objectSpread({
      type: t,
      fieldsToNull: fieldsToNull
    }, rec) : _objectSpread({
      type: t
    }, rec);
  });
}

/**
 * API class for Partner SOAP call
 */
export var SoapApi = /*#__PURE__*/function () {
  function SoapApi(conn) {
    _classCallCheck(this, SoapApi);
    this._conn = conn;
  }

  /**
   * Call SOAP Api (Partner) endpoint
   * @private
   */
  return _createClass(SoapApi, [{
    key: "_invoke",
    value: (function () {
      var _invoke2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, message, schema) {
        var _context3;
        var soapEndpoint, res;
        return _regeneratorRuntime.wrap(function _callee$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              soapEndpoint = new SOAP(this._conn, {
                xmlns: 'urn:partner.soap.sforce.com',
                endpointUrl: _concatInstanceProperty(_context3 = "".concat(this._conn.instanceUrl, "/services/Soap/u/")).call(_context3, this._conn.version)
              });
              _context4.next = 3;
              return soapEndpoint.invoke(method, message, schema ? {
                result: schema
              } : undefined, ApiSchemas);
            case 3:
              res = _context4.sent;
              return _context4.abrupt("return", res.result);
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee, this);
      }));
      function _invoke(_x, _x2, _x3) {
        return _invoke2.apply(this, arguments);
      }
      return _invoke;
    }()
    /**
     * Converts a Lead into an Account, Contact, or (optionally) an Opportunity.
     */
    )
  }, {
    key: "convertLead",
    value: function () {
      var _convertLead = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(leadConverts) {
        var schema;
        return _regeneratorRuntime.wrap(function _callee2$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              schema = _Array$isArray(leadConverts) ? [ApiSchemas.LeadConvertResult] : ApiSchemas.LeadConvertResult;
              return _context5.abrupt("return", this._invoke('convertLead', {
                leadConverts: leadConverts
              }, schema));
            case 2:
            case "end":
              return _context5.stop();
          }
        }, _callee2, this);
      }));
      function convertLead(_x4) {
        return _convertLead.apply(this, arguments);
      }
      return convertLead;
    }()
    /**
     * Merge up to three records into one
     */
  }, {
    key: "merge",
    value: function () {
      var _merge = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(mergeRequests) {
        var schema;
        return _regeneratorRuntime.wrap(function _callee3$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              schema = _Array$isArray(mergeRequests) ? [ApiSchemas.MergeResult] : ApiSchemas.MergeResult;
              return _context6.abrupt("return", this._invoke('merge', {
                mergeRequests: mergeRequests
              }, schema));
            case 2:
            case "end":
              return _context6.stop();
          }
        }, _callee3, this);
      }));
      function merge(_x5) {
        return _merge.apply(this, arguments);
      }
      return merge;
    }()
    /**
     * Delete records from the recycle bin immediately
     */
  }, {
    key: "emptyRecycleBin",
    value: (function () {
      var _emptyRecycleBin = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ids) {
        return _regeneratorRuntime.wrap(function _callee4$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", this._invoke('emptyRecycleBin', {
                ids: ids
              }, [ApiSchemas.EmptyRecycleBinResult]));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee4, this);
      }));
      function emptyRecycleBin(_x6) {
        return _emptyRecycleBin.apply(this, arguments);
      }
      return emptyRecycleBin;
    }()
    /**
     * Returns information about the standard and custom apps available to the logged-in user
     */
    )
  }, {
    key: "describeTabs",
    value: (function () {
      var _describeTabs = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", this._invoke('describeTabs', {}, [ApiSchemas.DescribeTabSetResult]));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee5, this);
      }));
      function describeTabs() {
        return _describeTabs.apply(this, arguments);
      }
      return describeTabs;
    }()
    /**
     * Retrieves the current system timestamp (Coordinated Universal Time (UTC) time zone) from the API
     */
    )
  }, {
    key: "getServerTimestamp",
    value: (function () {
      var _getServerTimestamp = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", this._invoke('getServerTimestamp', {}, ApiSchemas.GetServerTimestampResult));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee6, this);
      }));
      function getServerTimestamp() {
        return _getServerTimestamp.apply(this, arguments);
      }
      return getServerTimestamp;
    }()
    /**
     * Retrieves personal information for the user associated with the current session
     */
    )
  }, {
    key: "getUserInfo",
    value: (function () {
      var _getUserInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", this._invoke('getUserInfo', {}, ApiSchemas.GetUserInfoResult));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee7, this);
      }));
      function getUserInfo() {
        return _getUserInfo.apply(this, arguments);
      }
      return getUserInfo;
    }()
    /**
     * Sets the specified user’s password to the specified value
     */
    )
  }, {
    key: "setPassword",
    value: function setPassword(userId, password) {
      return this._invoke('setPassword', {
        userId: userId,
        password: password
      }, 'string');
    }

    /**
     * Resets the specified user’s password
     */
  }, {
    key: "resetPassword",
    value: function resetPassword(userId) {
      return this._invoke('resetPassword', {
        userId: userId
      }, ApiSchemas.ResetPasswordResult);
    }

    /**
     * Adds one or more new records to your organization’s data
     */
  }, {
    key: "create",
    value: function create(sObjects) {
      var schema = _Array$isArray(sObjects) ? [ApiSchemas.SaveResult] : ApiSchemas.SaveResult;
      var args = {
        '@xmlns': 'urn:partner.soap.sforce.com',
        '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
        'ns1:sObjects': toSoapRecord(sObjects)
      };
      return this._invoke('create', args, schema);
    }

    /**
     * Updates one or more existing records in your organization’s data.
     */
  }, {
    key: "update",
    value: function update(sObjects) {
      var schema = _Array$isArray(sObjects) ? [ApiSchemas.SaveResult] : ApiSchemas.SaveResult;
      var args = {
        '@xmlns': 'urn:partner.soap.sforce.com',
        '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
        'ns1:sObjects': toSoapRecord(sObjects)
      };
      return this._invoke('update', args, schema);
    }

    /**
     * Creates new records and updates existing records in your organization’s data.
     */
  }, {
    key: "upsert",
    value: function upsert(externalIdFieldName, sObjects) {
      var schema = _Array$isArray(sObjects) ? [ApiSchemas.UpsertResult] : ApiSchemas.UpsertResult;
      var args = {
        '@xmlns': 'urn:partner.soap.sforce.com',
        '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
        'ns1:externalIDFieldName': externalIdFieldName,
        'ns1:sObjects': toSoapRecord(sObjects)
      };
      return this._invoke('upsert', args, schema);
    }

    /**
     * Deletes one or more records from your organization’s data
     */
  }, {
    key: "delete",
    value: function _delete(ids) {
      var schema = _Array$isArray(ids) ? [ApiSchemas.DeleteResult] : ApiSchemas.DeleteResult;
      var args = {
        '@xmlns': 'urn:partner.soap.sforce.com',
        '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
        'ns1:ids': ids
      };
      return this._invoke('delete', args, schema);
    }

    /**
     * Undelete records from the recycle bin immediately
     */
  }, {
    key: "undelete",
    value: function undelete(ids) {
      var schema = [ApiSchemas.UndeleteResult];
      var args = {
        '@xmlns': 'urn:partner.soap.sforce.com',
        '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
        'ns1:ids': ids
      };
      return this._invoke('undelete', args, schema);
    }
  }]);
}();

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
registerModule('soap', function (conn) {
  return new SoapApi(conn);
});
export default SoapApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,