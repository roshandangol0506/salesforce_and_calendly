import _toConsumableArray from "@babel/runtime-corejs3/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "core-js/modules/es.error.cause.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import { exec } from 'child_process';
import { stripVTControlCharacters } from 'util';
import Connection from '../connection';
function isNotNullOrUndefined(v) {
  return v != null;
}

/**
 *
 */
export var SfdxRegistry = /*#__PURE__*/function () {
  function SfdxRegistry(_ref) {
    var cliPath = _ref.cliPath;
    _classCallCheck(this, SfdxRegistry);
    _defineProperty(this, "_orgInfoMap", {});
    this._cliPath = cliPath;
  }
  return _createClass(SfdxRegistry, [{
    key: "_createCommand",
    value: function _createCommand(command) {
      var _context, _context2, _context3, _context4;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      return _concatInstanceProperty(_context = _concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = "".concat(this._cliPath ? this._cliPath + '/' : '', "sfdx ")).call(_context3, command, " ")).call(_context2, _mapInstanceProperty(_context4 = _Object$keys(options)).call(_context4, function (option) {
        var _context5, _context6;
        return _concatInstanceProperty(_context5 = _concatInstanceProperty(_context6 = "".concat(option.length > 1 ? '--' : '-')).call(_context6, option)).call(_context5, options[option] != null ? ' ' + options[option] : '');
      }).join(' '), " --json ")).call(_context, args.join(' '));
    }
  }, {
    key: "_execCommand",
    value: function () {
      var _execCommand2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(command) {
        var options,
          args,
          cmd,
          buf,
          body,
          ret,
          err,
          _args = arguments;
        return _regeneratorRuntime.wrap(function _callee$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
              args = _args.length > 2 && _args[2] !== undefined ? _args[2] : [];
              cmd = this._createCommand(command, options, args);
              _context7.next = 5;
              return new _Promise(function (resolve, reject) {
                exec(cmd, function (err, ret) {
                  if (err && !ret) {
                    reject(err);
                  } else {
                    resolve(ret);
                  }
                });
              });
            case 5:
              buf = _context7.sent;
              body = stripVTControlCharacters(buf.toString());
              _context7.prev = 7;
              ret = JSON.parse(body);
              _context7.next = 14;
              break;
            case 11:
              _context7.prev = 11;
              _context7.t0 = _context7["catch"](7);
              throw new Error("Unexpectedd output from Sfdx cli: ".concat(body));
            case 14:
              if (!(ret.status === 0 && ret.result)) {
                _context7.next = 18;
                break;
              }
              return _context7.abrupt("return", ret.result);
            case 18:
              err = new Error(ret.message);
              err.name = ret.name;
              throw err;
            case 21:
            case "end":
              return _context7.stop();
          }
        }, _callee, this, [[7, 11]]);
      }));
      function _execCommand(_x) {
        return _execCommand2.apply(this, arguments);
      }
      return _execCommand;
    }()
  }, {
    key: "_getOrgList",
    value: function () {
      var _getOrgList2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!this._orgList) {
                this._orgList = this._execCommand('force:org:list');
              }
              return _context8.abrupt("return", this._orgList);
            case 2:
            case "end":
              return _context8.stop();
          }
        }, _callee2, this);
      }));
      function _getOrgList() {
        return _getOrgList2.apply(this, arguments);
      }
      return _getOrgList;
    }()
  }, {
    key: "getConnectionNames",
    value: function () {
      var _getConnectionNames = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var _context9, _context10, _context11;
        var _yield$this$_getOrgLi, nonScratchOrgs, scratchOrgs;
        return _regeneratorRuntime.wrap(function _callee3$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this._getOrgList();
            case 2:
              _yield$this$_getOrgLi = _context12.sent;
              nonScratchOrgs = _yield$this$_getOrgLi.nonScratchOrgs;
              scratchOrgs = _yield$this$_getOrgLi.scratchOrgs;
              return _context12.abrupt("return", _concatInstanceProperty(_context9 = []).call(_context9, _toConsumableArray(_filterInstanceProperty(_context10 = _mapInstanceProperty(nonScratchOrgs).call(nonScratchOrgs, function (o) {
                return o.alias;
              })).call(_context10, isNotNullOrUndefined)), _toConsumableArray(_filterInstanceProperty(_context11 = _mapInstanceProperty(scratchOrgs).call(scratchOrgs, function (o) {
                return o.alias;
              })).call(_context11, isNotNullOrUndefined)), _toConsumableArray(_mapInstanceProperty(nonScratchOrgs).call(nonScratchOrgs, function (o) {
                return o.username;
              })), _toConsumableArray(_mapInstanceProperty(scratchOrgs).call(scratchOrgs, function (o) {
                return o.username;
              }))));
            case 6:
            case "end":
              return _context12.stop();
          }
        }, _callee3, this);
      }));
      function getConnectionNames() {
        return _getConnectionNames.apply(this, arguments);
      }
      return getConnectionNames;
    }()
  }, {
    key: "getConnection",
    value: function () {
      var _getConnection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(name) {
        var config;
        return _regeneratorRuntime.wrap(function _callee4$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.getConnectionConfig(name);
            case 2:
              config = _context13.sent;
              return _context13.abrupt("return", config ? new Connection(config) : null);
            case 4:
            case "end":
              return _context13.stop();
          }
        }, _callee4, this);
      }));
      function getConnection(_x2) {
        return _getConnection.apply(this, arguments);
      }
      return getConnection;
    }()
  }, {
    key: "_getOrgInfo",
    value: function () {
      var _getOrgInfo2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(username) {
        var options, pOrgInfo, orgInfo;
        return _regeneratorRuntime.wrap(function _callee5$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              options = username ? {
                u: username
              } : {};
              if (!username || !this._orgInfoMap[username]) {
                pOrgInfo = this._execCommand('force:org:display', options);
                this._memoOrgInfo(pOrgInfo, username);
              }
              orgInfo = username ? this._orgInfoMap[username] : this._defaultOrgInfo;
              if (orgInfo) {
                _context14.next = 5;
                break;
              }
              throw new Error('no orginfo found');
            case 5:
              return _context14.abrupt("return", orgInfo);
            case 6:
            case "end":
              return _context14.stop();
          }
        }, _callee5, this);
      }));
      function _getOrgInfo(_x3) {
        return _getOrgInfo2.apply(this, arguments);
      }
      return _getOrgInfo;
    }()
  }, {
    key: "_memoOrgInfo",
    value: function _memoOrgInfo(pOrgInfo, username) {
      var _this = this;
      var pOrgInfo_ = pOrgInfo.then(function (orgInfo) {
        _this._orgInfoMap[orgInfo.username] = pOrgInfo_;
        if (orgInfo.alias) {
          _this._orgInfoMap[orgInfo.alias] = pOrgInfo_;
        }
        return orgInfo;
      });
      if (username) {
        this._orgInfoMap[username] = pOrgInfo_;
      } else {
        this._defaultOrgInfo = pOrgInfo_;
      }
    }
  }, {
    key: "getConnectionConfig",
    value: function () {
      var _getConnectionConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(name) {
        var orgInfo, accessToken, instanceUrl, loginUrl;
        return _regeneratorRuntime.wrap(function _callee6$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this._getOrgInfo(name);
            case 2:
              orgInfo = _context15.sent;
              if (orgInfo) {
                _context15.next = 5;
                break;
              }
              return _context15.abrupt("return", null);
            case 5:
              accessToken = orgInfo.accessToken, instanceUrl = orgInfo.instanceUrl, loginUrl = orgInfo.loginUrl;
              return _context15.abrupt("return", {
                accessToken: accessToken,
                instanceUrl: instanceUrl,
                loginUrl: loginUrl
              });
            case 7:
            case "end":
              return _context15.stop();
          }
        }, _callee6, this);
      }));
      function getConnectionConfig(_x4) {
        return _getConnectionConfig.apply(this, arguments);
      }
      return getConnectionConfig;
    }()
  }, {
    key: "saveConnectionConfig",
    value: function () {
      var _saveConnectionConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_name, _connConfig) {
        return _regeneratorRuntime.wrap(function _callee7$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
            case "end":
              return _context16.stop();
          }
        }, _callee7);
      }));
      function saveConnectionConfig(_x5, _x6) {
        return _saveConnectionConfig.apply(this, arguments);
      }
      return saveConnectionConfig;
    }()
  }, {
    key: "setDefaultConnection",
    value: function () {
      var _setDefaultConnection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_name) {
        return _regeneratorRuntime.wrap(function _callee8$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
            case "end":
              return _context17.stop();
          }
        }, _callee8);
      }));
      function setDefaultConnection(_x7) {
        return _setDefaultConnection.apply(this, arguments);
      }
      return setDefaultConnection;
    }()
  }, {
    key: "removeConnectionConfig",
    value: function () {
      var _removeConnectionConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(name) {
        return _regeneratorRuntime.wrap(function _callee9$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this._execCommand('force:org:delete', {
                u: name
              });
            case 2:
            case "end":
              return _context18.stop();
          }
        }, _callee9, this);
      }));
      function removeConnectionConfig(_x8) {
        return _removeConnectionConfig.apply(this, arguments);
      }
      return removeConnectionConfig;
    }() // eslint-disable-next-line @typescript-eslint/require-await
  }, {
    key: "getClientConfig",
    value: function () {
      var _getClientConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_name) {
        return _regeneratorRuntime.wrap(function _callee10$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              return _context19.abrupt("return", null);
            case 1:
            case "end":
              return _context19.stop();
          }
        }, _callee10);
      }));
      function getClientConfig(_x9) {
        return _getClientConfig.apply(this, arguments);
      }
      return getClientConfig;
    }() // eslint-disable-next-line @typescript-eslint/require-await
  }, {
    key: "getClientNames",
    value: function () {
      var _getClientNames = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        return _regeneratorRuntime.wrap(function _callee11$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", []);
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee11);
      }));
      function getClientNames() {
        return _getClientNames.apply(this, arguments);
      }
      return getClientNames;
    }()
  }, {
    key: "registerClientConfig",
    value: function () {
      var _registerClientConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_name, _clientConfig) {
        return _regeneratorRuntime.wrap(function _callee12$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
            case "end":
              return _context21.stop();
          }
        }, _callee12);
      }));
      function registerClientConfig(_x10, _x11) {
        return _registerClientConfig.apply(this, arguments);
      }
      return registerClientConfig;
    }()
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,