import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _wrapNativeSuper from "@babel/runtime-corejs3/helpers/wrapNativeSuper";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? _Reflect$construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context12, _context13; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context12 = ownKeys(Object(t), !0)).call(_context12, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context13 = ownKeys(Object(t))).call(_context13, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _endsWithInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/ends-with";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import "core-js/modules/es.error.cause.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.push.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.regexp.to-string.js";
import "core-js/modules/es.string.replace.js";
/**
 *
 */
import { createHash, randomBytes } from 'crypto';
import querystring from 'querystring';
import Transport, { HttpProxyTransport, XdProxyTransport } from './transport';
var defaultOAuth2Config = {
  loginUrl: 'https://login.salesforce.com'
};

// Makes a nodejs base64 encoded string compatible with rfc4648 alternative encoding for urls.
// @param base64Encoded a nodejs base64 encoded string
function base64UrlEscape(base64Encoded) {
  // builtin node js base 64 encoding is not 64 url compatible.
  // See https://toolsn.ietf.org/html/rfc4648#section-5
  return base64Encoded.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}

/**
 * type defs
 */

/**
 * OAuth2 class
 */
export var OAuth2 = /*#__PURE__*/function () {
  /**
   *
   */
  function OAuth2(config) {
    _classCallCheck(this, OAuth2);
    var loginUrl = config.loginUrl,
      authzServiceUrl = config.authzServiceUrl,
      tokenServiceUrl = config.tokenServiceUrl,
      revokeServiceUrl = config.revokeServiceUrl,
      clientId = config.clientId,
      clientSecret = config.clientSecret,
      redirectUri = config.redirectUri,
      proxyUrl = config.proxyUrl,
      httpProxy = config.httpProxy,
      useVerifier = config.useVerifier;
    if (authzServiceUrl && tokenServiceUrl) {
      var _context;
      this.loginUrl = _sliceInstanceProperty(_context = authzServiceUrl.split('/')).call(_context, 0, 3).join('/');
      this.authzServiceUrl = authzServiceUrl;
      this.tokenServiceUrl = tokenServiceUrl;
      this.revokeServiceUrl = revokeServiceUrl || "".concat(this.loginUrl, "/services/oauth2/revoke");
    } else {
      var _context2, _context3, _context4, _context5;
      this.loginUrl = loginUrl !== null && loginUrl !== void 0 ? loginUrl : defaultOAuth2Config.loginUrl;
      var maybeSlash = _endsWithInstanceProperty(_context2 = this.loginUrl).call(_context2, '/') ? '' : '/';
      this.authzServiceUrl = _concatInstanceProperty(_context3 = "".concat(this.loginUrl)).call(_context3, maybeSlash, "services/oauth2/authorize");
      this.tokenServiceUrl = _concatInstanceProperty(_context4 = "".concat(this.loginUrl)).call(_context4, maybeSlash, "services/oauth2/token");
      this.revokeServiceUrl = _concatInstanceProperty(_context5 = "".concat(this.loginUrl)).call(_context5, maybeSlash, "services/oauth2/revoke");
    }
    this.clientId = clientId;
    this.clientSecret = clientSecret;
    this.redirectUri = redirectUri;
    if (proxyUrl) {
      this._transport = new XdProxyTransport(proxyUrl);
    } else if (httpProxy) {
      this._transport = new HttpProxyTransport(httpProxy);
    } else {
      this._transport = new Transport();
    }
    if (useVerifier) {
      // Set a code verifier string for OAuth authorization
      this.codeVerifier = base64UrlEscape(randomBytes(Math.ceil(128)).toString('base64'));
    }
  }

  /**
   * Get Salesforce OAuth2 authorization page URL to redirect user agent.
   */
  return _createClass(OAuth2, [{
    key: "getAuthorizationUrl",
    value: function getAuthorizationUrl() {
      var _context6;
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (this.codeVerifier) {
        // code verifier must be a base 64 url encoded hash of 128 bytes of random data. Our random data is also
        // base 64 url encoded. See Connection.create();
        params.code_challenge = base64UrlEscape(createHash('sha256').update(this.codeVerifier).digest('base64'));
      }
      var _params = _objectSpread(_objectSpread({}, params), {}, {
        response_type: 'code',
        client_id: this.clientId,
        redirect_uri: this.redirectUri
      });
      return this.authzServiceUrl + (_includesInstanceProperty(_context6 = this.authzServiceUrl).call(_context6, '?') ? '&' : '?') + querystring.stringify(_params);
    }

    /**
     * OAuth2 Refresh Token Flow
     */
  }, {
    key: "refreshToken",
    value: (function () {
      var _refreshToken2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_refreshToken) {
        var params, ret;
        return _regeneratorRuntime.wrap(function _callee$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (this.clientId) {
                _context7.next = 2;
                break;
              }
              throw new Error('No OAuth2 client id information is specified');
            case 2:
              params = {
                grant_type: 'refresh_token',
                refresh_token: _refreshToken,
                client_id: this.clientId
              };
              if (this.clientSecret) {
                params.client_secret = this.clientSecret;
              }
              _context7.next = 6;
              return this._postParams(params);
            case 6:
              ret = _context7.sent;
              return _context7.abrupt("return", ret);
            case 8:
            case "end":
              return _context7.stop();
          }
        }, _callee, this);
      }));
      function refreshToken(_x) {
        return _refreshToken2.apply(this, arguments);
      }
      return refreshToken;
    }()
    /**
     * Send access token request to the token endpoint.
     * When a code (string) is passed in first argument, it will use Web Server Authentication Flow (Authorization Code Grant).
     * Otherwise, it will use the specified `grant_type` and pass parameters to the endpoint.
     */
    )
  }, {
    key: "requestToken",
    value: (function () {
      var _requestToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(codeOrParams) {
        var params,
          _params,
          ret,
          _args2 = arguments;
        return _regeneratorRuntime.wrap(function _callee2$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              params = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
              if (!(typeof codeOrParams === 'string' && (!this.clientId || !this.redirectUri))) {
                _context8.next = 3;
                break;
              }
              throw new Error('No OAuth2 client id or redirect uri configuration is specified');
            case 3:
              _params = _objectSpread(_objectSpread({}, params), typeof codeOrParams === 'string' ? {
                grant_type: 'authorization_code',
                code: codeOrParams
              } : codeOrParams);
              if (this.clientId) {
                _params.client_id = this.clientId;
              }
              if (this.clientSecret) {
                _params.client_secret = this.clientSecret;
              }
              if (this.redirectUri) {
                _params.redirect_uri = this.redirectUri;
              }
              _context8.next = 9;
              return this._postParams(_params);
            case 9:
              ret = _context8.sent;
              return _context8.abrupt("return", ret);
            case 11:
            case "end":
              return _context8.stop();
          }
        }, _callee2, this);
      }));
      function requestToken(_x2) {
        return _requestToken.apply(this, arguments);
      }
      return requestToken;
    }()
    /**
     * OAuth2 Username-Password Flow (Resource Owner Password Credentials)
     */
    )
  }, {
    key: "authenticate",
    value: (function () {
      var _authenticate = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(username, password) {
        var ret;
        return _regeneratorRuntime.wrap(function _callee3$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!(!this.clientId || !this.clientSecret)) {
                _context9.next = 2;
                break;
              }
              throw new Error('No valid OAuth2 client configuration set');
            case 2:
              _context9.next = 4;
              return this._postParams({
                grant_type: 'password',
                username: username,
                password: password,
                client_id: this.clientId,
                client_secret: this.clientSecret
              });
            case 4:
              ret = _context9.sent;
              return _context9.abrupt("return", ret);
            case 6:
            case "end":
              return _context9.stop();
          }
        }, _callee3, this);
      }));
      function authenticate(_x3, _x4) {
        return _authenticate.apply(this, arguments);
      }
      return authenticate;
    }()
    /**
     * OAuth2 Revoke Session Token
     */
    )
  }, {
    key: "revokeToken",
    value: (function () {
      var _revokeToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(token) {
        var response, res;
        return _regeneratorRuntime.wrap(function _callee4$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this._transport.httpRequest({
                method: 'POST',
                url: this.revokeServiceUrl,
                body: querystring.stringify({
                  token: token
                }),
                headers: {
                  'content-type': 'application/x-www-form-urlencoded'
                }
              });
            case 2:
              response = _context10.sent;
              if (!(response.statusCode >= 400)) {
                _context10.next = 7;
                break;
              }
              res = querystring.parse(response.body);
              if (!res || !res.error) {
                res = {
                  error: "ERROR_HTTP_".concat(response.statusCode),
                  error_description: response.body
                };
              }
              throw new (/*#__PURE__*/function (_Error) {
                function _class(_ref) {
                  var _this;
                  var error = _ref.error,
                    error_description = _ref.error_description;
                  _classCallCheck(this, _class);
                  _this = _callSuper(this, _class, [error_description]);
                  _this.name = error;
                  return _this;
                }
                _inherits(_class, _Error);
                return _createClass(_class);
              }(/*#__PURE__*/_wrapNativeSuper(Error)))(res);
            case 7:
            case "end":
              return _context10.stop();
          }
        }, _callee4, this);
      }));
      function revokeToken(_x5) {
        return _revokeToken.apply(this, arguments);
      }
      return revokeToken;
    }()
    /**
     * @private
     */
    )
  }, {
    key: "_postParams",
    value: (function () {
      var _postParams2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(params) {
        var response, res;
        return _regeneratorRuntime.wrap(function _callee5$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (this.codeVerifier) params.code_verifier = this.codeVerifier;
              _context11.next = 3;
              return this._transport.httpRequest({
                method: 'POST',
                url: this.tokenServiceUrl,
                body: querystring.stringify(params),
                headers: {
                  'content-type': 'application/x-www-form-urlencoded'
                }
              });
            case 3:
              response = _context11.sent;
              try {
                res = JSON.parse(response.body);
              } catch (e) {
                /* eslint-disable no-empty */
              }
              if (!(response.statusCode >= 400)) {
                _context11.next = 8;
                break;
              }
              res = res || {
                error: "ERROR_HTTP_".concat(response.statusCode),
                error_description: response.body
              };
              throw new (/*#__PURE__*/function (_Error2) {
                function _class2(_ref2) {
                  var _this2;
                  var error = _ref2.error,
                    error_description = _ref2.error_description;
                  _classCallCheck(this, _class2);
                  _this2 = _callSuper(this, _class2, [error_description]);
                  _this2.name = error;
                  return _this2;
                }
                _inherits(_class2, _Error2);
                return _createClass(_class2);
              }(/*#__PURE__*/_wrapNativeSuper(Error)))(res);
            case 8:
              return _context11.abrupt("return", res);
            case 9:
            case "end":
              return _context11.stop();
          }
        }, _callee5, this);
      }));
      function _postParams(_x6) {
        return _postParams2.apply(this, arguments);
      }
      return _postParams;
    }())
  }]);
}();
export default OAuth2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,